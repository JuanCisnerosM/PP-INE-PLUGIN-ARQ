package com.miempresa.sonar.rules;

import org.sonar.check.Rule;
import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;
import org.sonar.plugins.java.api.semantic.Type;
import org.sonar.plugins.java.api.tree.*;

import javax.annotation.Nonnull;
import java.util.Arrays;
import java.util.List;

@Rule(key = "NoRepositoryAccessFromExpositionRule")
public class NoRepositoryAccessFromExpositionRule extends IssuableSubscriptionVisitor {

    // Patrones para detectar paquetes de exposición
    private static final List<String> EXPOSITION_PATTERNS = Arrays.asList(
        "/exposition/", ".exposition.",
        "/rest/", ".rest.",
        "/controller/", ".controller.",
        "/controllers/", ".controllers.",
        "/api/", ".api.",
        "/resource/", ".resource.",
        "/resources/", ".resources."
    );

    // Patrones para detectar paquetes de repositorio
    private static final List<String> REPOSITORY_PATTERNS = Arrays.asList(
        "/repository/", ".repository.",
        "/repositories/", ".repositories.",
        "/persistence/", ".persistence.",
        "/dao/", ".dao.",
        "/daos/", ".daos.",
        "/infraestructure/", ".infraestructure.",
        "/infra/", ".infra."
    );

    @Override
    public List<Tree.Kind> nodesToVisit() {
        return Arrays.asList(
            Tree.Kind.IMPORT,
            Tree.Kind.VARIABLE,
            Tree.Kind.METHOD
        );
    }
    
    @Override
    public void visitNode(@Nonnull Tree tree) {
        if (!isInExpositionPackage()) {
            return;
        }

        switch (tree.kind()) {
            case IMPORT:
                checkImport((ImportTree) tree);
                break;
            case VARIABLE:
                checkVariable((VariableTree) tree);
                break;
            case METHOD:
                checkMethod((MethodTree) tree);
                break;
            default:
                // No hacer nada para otros tipos de nodos
                break;
        }
    }

    private void checkImport(ImportTree tree) {
        String imported = tree.qualifiedIdentifier().toString();
        if (isRepositoryPattern(imported)) {
            reportIssue(tree, String.format(
                "No debes importar clases del repositorio ('%s') directamente en la capa de exposición.\n" +
                "Solución: Utiliza servicios para acceder a los datos. Los controladores solo deben comunicarse con servicios.",
                imported
            ));
        }
    }

    private void checkVariable(VariableTree tree) {
        Type type = tree.type().symbolType();
        String typeName = type.fullyQualifiedName();
        
        if (isRepositoryPattern(typeName)) {
            reportIssue(tree, String.format(
                "No debes declarar variables de tipo repositorio ('%s') en la capa de exposición.\n" +
                "Solución: Inyecta servicios en lugar de repositorios. Los controladores deben depender de servicios.",
                typeName
            ));
        }
    }

    private void checkMethod(MethodTree tree) {
        // Verificar tipo de retorno
        TypeTree returnTypeTree = tree.returnType();
        if (returnTypeTree != null) {
            Type returnType = returnTypeTree.symbolType();
            String returnTypeName = returnType.fullyQualifiedName();
            
            if (isRepositoryPattern(returnTypeName)) {
                reportIssue(tree, String.format(
                    "El método '%s' no debe retornar tipos del repositorio ('%s') en la capa de exposición.\n" +
                    "Solución: Retorna DTOs o tipos de dominio a través de servicios.",
                    tree.simpleName().name(),
                    returnTypeName
                ));
            }
        }

        // Verificar parámetros
        for (VariableTree param : tree.parameters()) {
            Type paramType = param.type().symbolType();
            String paramTypeName = paramType.fullyQualifiedName();
            
            if (isRepositoryPattern(paramTypeName)) {
                reportIssue(param, String.format(
                    "El parámetro '%s' no debe ser de tipo repositorio ('%s') en la capa de exposición.\n" +
                    "Solución: Usa DTOs o tipos de dominio como parámetros y delega la lógica de persistencia a los servicios.",
                    param.simpleName().name(),
                    paramTypeName
                ));
            }
        }
    }

    private boolean isInExpositionPackage() {
        String path = context.getInputFile().filename();
        return EXPOSITION_PATTERNS.stream().anyMatch(pattern -> 
            path.toLowerCase().replace("\\", "/").contains(pattern));
    }

    private boolean isRepositoryPattern(String type) {
        if (type == null) return false;
        String normalizedType = type.toLowerCase();
        return REPOSITORY_PATTERNS.stream().anyMatch(pattern -> 
            normalizedType.contains(pattern));
    }
}
